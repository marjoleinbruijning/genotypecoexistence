
#########################################################################################
## Zero-growth isoclines for each clonal combination
#########################################################################################

## all  B-N combinations and temperatures
treatments <- expand.grid(nHetero=allN,nCon=allN,country=c('N','B'))
treatments <- do.call("rbind", replicate(6, treatments, simplify = FALSE)) ## for each clone
treatments$clone <- rep(c(1,7,2,8,3,9,4,10,5,11,6,12),each=36)

treatments <- do.call("rbind", replicate(length(allTemp),
                                         treatments, simplify = FALSE)) ## for each temperature
treatments$temp <- rep(allTemp,each=432)

vr <- buildVitalrates(allsizes,
                      treatments=treatments,
                      ndraws=ndraws,
                      predeffect='posterior')

## Mean predictions
dNmean <- array(NA,dim=c(n,n,2,length(allTemp),12)) ## 12 for each clone
l <- rep(NA,nrow(treatments))

P <- colMeans(vr$P)
growth <- colMeans(vr$growth)
R1 <- colMeans(vr$R1)
R2 <- colMeans(vr$R2)
R3 <- colMeans(vr$R3)
R4 <- colMeans(vr$R4)
offsize <- colMeans(vr$offsize)

for (i in 1:nrow(treatments)) {

    incF <- vr$df$nHetero == treatments$nH[i] & vr$df$nCon == treatments$nC[i] &
        vr$df$country == treatments$country[i] &
        vr$df$temp == treatments$temp[i] & vr$df$sex == 'f' & vr$df$clone == treatments$clone[i]
    
    ##incM <- vr$df$nHetero == treatments$nH[i] & vr$df$nCon == treatments$nC[i] &
    ##    vr$df$country == treatments$country[i] &
    ##    vr$df$temp == treatments$temp[i] & vr$df$sex == 'm' & vr$df$clone == treatments$clone[i]

    
    ipm <- createIPM(allsizes,
                     P=P[incF],
                     growth=growth[incF],
                     R1=R1[incF],
                     R2=R2[incF],
                     R3=R3[incF],
                     R4=R4[incF],
                     offsize=offsize[incF],
                     nc=nc)
    
    l[i] <- eigenAnalysis(ipm$ipm)$lambda

    ## Save in dN array to ease plotting
    if (treatments$country[i] == 'B') {
        dNmean[which(allN == treatments$nC[i]),
               which(allN == treatments$nH[i]),1,
               which(allTemp == treatments$temp[i]),
               treatments$clone[i]] <- l[i] ## Belgian
        
    } else {
        dNmean[which(allN == treatments$nH[i]),
               which(allN == treatments$nC[i]),2,
               which(allTemp == treatments$temp[i]),
               treatments$clone[i]] <- l[i] ## Norwegian
    }

    cat('\r',i)

}  


saveRDS(dNmean,file=paste0('Results/clonalvariation.rds'))




######################################################################################
######################################################################################
######################################################################################
old <- function () {

    ## save output
    dN <- array(NA,dim=c(n,n,2,nrow(scenarios)))

    for (k in 1:nrow(scenarios)) {

        temp <- scenarios$temp[k]

        ## Vector plot
        for (i in 1:n) { ## vary Norwegian pop sizes
            for (j in 1:n) { ## Vary Belgian pop sizes

                ## Belgian change in density
                ipm1 <- createIPM(allsizes,
                                  temp=temp,
                                  nH=allN[i],
                                  nC=allN[j],
                                  nSc=NA,
                                  country='B',
                                  clone=scenarios$pop1[k])

                ## Norwegian change in density
                ipm2 <- createIPM(allsizes,
                                  temp=temp,
                                  nH=allN[j],
                                  nC=allN[i],
                                  nSc=NA,
                                  country='N',
                                  clone=scenarios$pop2[k])

                dN[j,i,1,k] <- eigenAnalysis(ipm1$ipm[1:nc,1:nc])$lambda
                dN[j,i,2,k] <- eigenAnalysis(ipm2$ipm[1:nc,1:nc])$lambda
                
                
                cat('\r',i,'-',j,'-',k)
            }
        }
    }

    ## Simulate dynamics
    times <- 100 ## number of time steps for simulation
    ## sample offspring from observed neonate size distribution
    cl <- table(cut(na.omit(dat$sizeoff),c(allsizes-(cw/2),max(allsizes)+cw/2)))
    cl <- cl / sum(cl)

    clones <- popinfo
    clones <- clones[clones$popNo %in% mixpop,]
    clones$propIPM <- clones$propModfreq <- NA

    clones$cols <- rep(c('lightblue','orange','red'),each=12)

    simulN <- array(NA,dim=c(200,times,2,nrow(clones)))

    clones$propModfreq <- fitted(modFreq,newdata=data.frame(day=times,temp=clones$temps,popNo=clones$popNo),
                                 type='response')[,1]
    
    colClone <- rainbow(6)
    pchs <- c(21:25,4)

    for (k in 1:nrow(clones)) { # each Belgian-Norwegian clone combination

        temp <- clones$temps[k]

        simulN[,1,,k] <- 0
        simulN[1:100,1,,k] <- cl * 12 # start with 12 neonates with initial size distribution

        for (i in 1:(times-1)) {

            ## Belgians
            ipm <- createIPM(allsizes,
                             temp=temp,
                             nH=sum(simulN[,i,2,k]), # heterospecifics                             nC=sum(simulN[,i,1,k]), # conspecifics
                             nSc=NA,
                             country='B',
                             clone=clones$pop2[k])

            simulN[,i+1,1,k] <- ipm$ipm %*% simulN[,i,1,k]

            
            ## Norwegians
            ipm <- createIPM(allsizes,
                             temp=temp,
                             nH=sum(simulN[,i,1,k]), # heterospecifics
                             nC=sum(simulN[,i,2,k]), # conspecifics
                             nSc=NA,
                             country='N',
                             clone=clones$pop1[k])

            simulN[,i+1,2,k] <- ipm$ipm %*% simulN[,i,2,k]

        }

        clones$propIPM[k] <- sum(simulN[,ncol(simulN),1,k]) / sum(simulN[,ncol(simulN),,k])

        plot(clones$propModfreq,clones$propIPM,col=clones$col,cex=2,ylim=c(0,1),xlim=c(0,1),bty='l',
             xlab='Predicted proportion Belgian clones based on observed genotypes',
             ylab='Predicted proportion Belgian clones based on IPM')
        lines(0:1,0:1)

    }
}


